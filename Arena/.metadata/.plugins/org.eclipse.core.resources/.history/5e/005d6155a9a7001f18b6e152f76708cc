package arena;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.Enumeration;
import java.util.Random;
import java.util.Vector;

import javax.swing.*;

public class Arena extends JFrame implements KeyListener, MouseMotionListener, ActionListener{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 2901807056089527092L;
	PlayerCharacter player;
	JPanel HUD = new JPanel();
	JPanel controls = new JPanel();
	JPanel healthBar = new JPanel();
	JPanel mapField = new JPanel();
	JLayeredPane mapPane = new JLayeredPane();
	JPanel infoField = new JPanel();
	JPanel logoField = new JPanel();
	EnemyCharacter enemy;
	
	static Arena theInstance;

	final ImageIcon floorIcon = createImageIcon("resources/Maze/FloorTile.png");
	final ImageIcon treasureIcon = createImageIcon("resources/Maze/Chest.png");
	final ImageIcon blockerIcon = createImageIcon("resources/Maze/Blocker.png");
	final ImageIcon labelIcon = createImageIcon("resources/Arena_logo.png");
	final ImageIcon fullHealthIcon = createImageIcon("resources/GUI/HealthFull.png");
	final ImageIcon emptyHealthIcon = createImageIcon("resources/GUI/HealthEmpty.png");
	
	private Vector<Point> pillars;
	private Point finish;
	
	public Arena()
	{
		theInstance = this;
		init();
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setTitle("MazeMaker!");

		mapField.setLayout(new BoxLayout(mapField, BoxLayout.PAGE_AXIS));
		
		this.setContentPane(mapField);
		this.pack();
		this.setVisible(true);
		MovementQueue.getTheQueue().add(enemy);
	}
	
	
	public static Arena getInstance()
	{
		return theInstance;
	}
	
	public JLayeredPane getPane()
	{
		return layeredPane;
	}
	
	
	int rows = 0;
	int columns = 0;

	/** Returns an ImageIcon, or null if the path was invalid. */
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = Arena.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }
	
	private void generateBlockers(JLayeredPane pane, Integer level)
	{
		int column = 0;
		int columnCount = 0;
		
		if (pillars == null)
		{
			pillars = new Vector<Point>();
		}
		
		Random generator = new Random();
		for (int i = 0; i < rows; i++)
		{
			while (column < columns - columnCount)
			{
				column = generator.nextInt(columns);
				Point blockerPosition = new Point(i, column);
				if (!pillars.contains(blockerPosition))
				{
					pillars.add(blockerPosition);
					columnCount++;
				}
			}
			columnCount = 0;
		}
		
		Enumeration<Point> e = pillars.elements();
		for (;e.hasMoreElements();)
		{
			Point position = (Point)e.nextElement();
			JLabel blocker = new JLabel(blockerIcon);
			blocker.setBounds(position.x * 16, position.y * 16, 16, 16);
			pane.add(blocker, level);
		}
	}
	
	public void placeEndPoint(JLayeredPane pane, Integer level)
	{
		Random generator = new Random();
		int x = generator.nextInt(rows - 1);
		int y = generator.nextInt(columns - 1);
		Point target = new Point(x, y);
		
		Point zero = new Point(0,0);
		
		while (pillars != null && pillars.contains(target) || target == zero)
		{
			x = generator.nextInt(rows - 1);
			y = generator.nextInt(columns - 1);
			target = new Point(x, y);
		}
		
		finish = target;
		EnemyCharacter endPoint = new EnemyCharacter(new Dimension((rows -1) * 16, (columns -1) * 16));
		endPoint.setBounds(x * 16, y *16, 16, 16);
		pane.add(endPoint, level);
		endPoint.setPosition(new Point(x * 16, y *16));
		enemy = endPoint;;
	}

	@Override
	public void keyPressed(KeyEvent ke) {
		int pressed = ke.getKeyCode();
		boolean moved = true;
		switch (pressed)
		{
		case KeyEvent.VK_DOWN:
			player.setDirection(0);
			break;
		case KeyEvent.VK_UP:
			player.setDirection(1);
			break;
		case KeyEvent.VK_LEFT:
			player.setDirection(2);
			break;
		case KeyEvent.VK_RIGHT:
			player.setDirection(3);
			break;
		case KeyEvent.VK_ENTER:
			player.attack();
			moved = false;
			break;
		}
		if (moved)
		{
			player.setDistanceToTravel(4);
			MovementQueue.getTheQueue().add(player);
		}
	}

	@Override
	public void keyReleased(KeyEvent ke) {
	}

	@Override
	public void keyTyped(KeyEvent ke) {
	}
	
	
    private JLayeredPane layeredPane;

    //Adjustments to put Duke's toe at the cursor's tip.
    private static final int XFUDGE = 40;
    private static final int YFUDGE = 57;
    private void init()
    {
        //setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));

        //Create and set up the layered pane.
        layeredPane = new JLayeredPane();
        layeredPane.setPreferredSize(new Dimension(300, 310));
        //layeredPane.setBorder(BorderFactory.createTitledBorder(
          //                          "Move the Mouse to Move Duke"));
        //layeredPane.addMouseMotionListener(this);
		rows = layeredPane.getPreferredSize().width / 16;
		columns = layeredPane.getPreferredSize().height / 16;


        //Create and add the player to the layered pane.
        player = new PlayerCharacter(new Dimension((rows -1) * 16, (columns -1) * 16));
        player.setBounds(0, 0, 16, 16);
        
		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < columns; j++)
			{
				JLabel floorTile = new JLabel();
				floorTile.setIcon(floorIcon);
				floorTile.setBounds(i, j, floorIcon.getIconWidth(), floorIcon.getIconHeight());
				layeredPane.add(floorTile, new Integer(1), i * columns + j);
				floorTile.setLocation(i * 16, j * 16);
			}
			
		}
		
		//generateBlockers(layeredPane, new Integer(2));
		pillars = new Vector<Point>();
        player.pillars = pillars;
		
		if (pillars != null && pillars.contains(new Point(0,0)))
		{
			boolean set=false;
			for (int i = 0; i < rows; i++)
			{
				for (int j = 0; j < columns; j++)
				{
					if (!pillars.contains(new Point(i, j)))
					{
						player.setLocation(i*16, j*16);
						player.setPosition(new Point(i*16, j*16));
						player.setGridPosition(new Point(i, j));
						set = true;
						break;
					}
				}
				if (set)
					break;
			}
		}
		this.placeEndPoint(layeredPane, new Integer(2));
		
		player.setFinish(this.finish);
        layeredPane.add(player, new Integer(2), 0);

        //Add control pane and layered pane to this JPanel.
        mapField.add(Box.createRigidArea(new Dimension(0, 10)));
        mapField.add(createControlPanel());
        mapField.add(Box.createRigidArea(new Dimension(0, 10)));
        mapField.add(layeredPane);
        mapField.addKeyListener(this);
        mapField.setFocusable(true);
        mapField.requestFocusInWindow();
        
    }
    //Create and set up a colored label.
    private static String REPLAY = "Replay";
    private static String QUIT = "Quit";
    private static String RETRY = "Recreate Maze?";

    //Create the control pane for the top of the frame.
    private JPanel createControlPanel() {

        controls = new JPanel();
    	JLabel logo = new JLabel(labelIcon);
    	logo.setBounds(0, 0, labelIcon.getIconWidth(), labelIcon.getIconHeight());
    	JButton retry = new JButton();
    	retry.setText("Recreate Maze?");
    	retry.addActionListener(this);
    	retry.setBounds(labelIcon.getIconWidth() / 4, labelIcon.getIconHeight() / 4, labelIcon.getIconWidth() / 2, labelIcon.getIconHeight() / 2);
    	controls.add(logo);
    	HUD.add(retry);
    	controls.add(HUD);
        return controls;
    }

    //Make Duke follow the cursor.
    public void mouseMoved(MouseEvent e) {
        player.setLocation(e.getX()-XFUDGE, e.getY()-YFUDGE);
    }
    public void mouseDragged(MouseEvent e) {} //do nothing

    //Handle user interaction with the check box and combo box.
    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();

        if (REPLAY.equals(cmd)) {
        	this.retry();
        } else if (QUIT.equals(cmd)) {
        	System.exit(0);        	
        } else if (RETRY.equals(cmd)) {
        	this.retry();        	
        }
    }
    
    public static void reset(Arena active)
    {
    	active.removeAll();
    	active.setVisible(false);
    	active = new Arena();
    }
    
    private void retry()
    {
    	pillars = new Vector<Point>();
    	mapField = new JPanel();
		init();
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setTitle("MazeMaker!");

		mapField.setLayout(new BoxLayout(mapField, BoxLayout.PAGE_AXIS));
		
		this.setContentPane(mapField);
		MovementQueue.restart();
		mapField.requestFocusInWindow();
    	//this.in
    }

    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    public static void createAndShowGUI() {
        //Create and set up the window.
        JFrame frame = new JFrame("LayeredPaneDemo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Create and set up the content pane.

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
	JButton replay = new JButton();
	JButton quit = new JButton();
    
    public void victory()
    {
    	this.removeKeyListener(this);
    	JLabel victoryText = new JLabel();
    	victoryText.setText("Congratulatons. Play again?");
    	JPanel victoryPanel = new JPanel(new GridLayout(2,1));
    	JPanel buttonPanel = new JPanel(new GridLayout(1, 2));
    	
    	victoryText.setBounds(0, 0, replay.getPreferredSize().width, 20);
    	replay.setText("Replay");
    	quit.setText("Quit");
    	replay.addActionListener(this);
    	quit.addActionListener(this);
    	buttonPanel.add(replay);
    	buttonPanel.add(quit);
    	victoryPanel.add(victoryText);
    	victoryPanel.add(buttonPanel);
    	victoryPanel.setBounds(0, 100, 300, 100);
    	
    	layeredPane.add(victoryPanel, new Integer(10));
    	layeredPane.invalidate();
    }
    
    public void drawHealth(int current, int max)
    {
    	healthBar = new JPanel();
    	for (int i = 0; i < max; i++)
    	{
    		JLabel healthIndicator = new JLabel();
    		healthIndicator.setBounds(0,0,16,16);
    		if (i+1 > current)
    			healthIndicator.setIcon(emptyHealthIcon);
    		else
    			healthIndicator.setIcon(fullHealthIcon);
    		
    		healthBar.add(healthIndicator);
    	}
    	healthBar.setBounds(0, 0, max*16, 16);
    	BoxLayout hudLayout = new BoxLayout(HUD, BoxLayout.Y_AXIS);
    	HUD.setLayout(hudLayout);
    	HUD.add(healthBar);
    	healthBar.repaint();
    }
}
