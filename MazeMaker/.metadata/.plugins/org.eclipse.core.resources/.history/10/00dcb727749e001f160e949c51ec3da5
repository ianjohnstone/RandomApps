import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Panel;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Random;
import java.util.Vector;

import javax.swing.*;
import javax.swing.border.BevelBorder;

public class MazeMaker extends JFrame implements KeyListener, MouseMotionListener{
	
	private JLabel label1;
	PlayerCharacter player;
	JPanel verticalBox1 = new JPanel();
	JPanel verticalBox2 = new JPanel();
	JPanel horizontalBox = new JPanel();
	JPanel mapField = new JPanel();
	JLayeredPane mapPane = new JLayeredPane();
	JPanel infoField = new JPanel();
	JPanel logoField = new JPanel();

	final ImageIcon floorIcon = createImageIcon("resources/Maze/FloorTile.png");
	final ImageIcon treasureIcon = createImageIcon("resources/Maze/Chest.png");
	final ImageIcon blockerIcon = createImageIcon("resources/Maze/Blocker.png");
	
	private Vector pillars;
	
	public MazeMaker()
	{
		init(mapField, floorIcon);
		final ImageIcon logo = createImageIcon("resources/MazeMaker_logo.png");
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setTitle("MazeMaker!");

		mapField.setLayout(new BoxLayout(mapField, BoxLayout.PAGE_AXIS));
		
		JLabel logoLabel = new JLabel(logo);
		/*
		mapPane.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
		mapPane.setPreferredSize(new Dimension(600,400));

		player = new PlayerCharacter(mapPane.getPreferredSize());
		mapPane.add(player, new Integer(10));
		mapPane.moveToFront(player);
		mapField.add(logoLabel, new Integer(100));
		mapField.setOpaque(true);
		mapField.setLayout(new BoxLayout(mapField, BoxLayout.PAGE_AXIS));
		mapField.add(mapPane);
		*/

		this.setContentPane(mapField);
		this.addKeyListener(this);
		this.pack();
		this.setVisible(true);
	}
	
	int rows = 0;
	int columns = 0;

	/** Returns an ImageIcon, or null if the path was invalid. */
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = MazeMaker.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }
	
	private void generateBlockers(JLayeredPane pane, Integer level)
	{
		int column = 0;
		int columnCount = 0;
		
		if (pillars == null)
		{
			pillars = new Vector();
		}
		
		Random generator = new Random();
		for (int i = 0; i < rows; i++)
		{
			while (column < columns - columnCount)
			{
				column = generator.nextInt(columns);
				Point blockerPosition = new Point(i, column);
				if (!pillars.contains(blockerPosition))
				{
					pillars.add(blockerPosition);
					columnCount++;
				}
			}
			columnCount = 0;
		}
		
		Enumeration<Point> e = pillars.elements();
		for (;e.hasMoreElements();)
		{
			Point position = (Point)e.nextElement();
			JLabel blocker = new JLabel(blockerIcon);
			blocker.setBounds(position.x * 16, position.y * 16, 16, 16);
			pane.add(blocker, level);
		}
	}
	
	public void placeEndPoint(JLayeredPane pane, Integer level)
	{
		Random generator = new Random();
		int x = generator.nextInt(rows - 1);
		int y = generator.nextInt(columns - 1);
		Point target = new Point(x, y);
		
		Point zero = new Point(0,0);
		
		while (pillars.contains(target) || target == zero)
		{
			x = generator.nextInt(rows - 1);
			y = generator.nextInt(columns - 1);
			target = new Point(x, y);
		}
		
		JLabel endPoint = new JLabel(treasureIcon);
		endPoint.setBounds(x, y, 16, 16);
		pane.add(endPoint, level);
	}

	@Override
	public void keyPressed(KeyEvent ke) {
		// TODO Auto-generated method stub
		int pressed = ke.getKeyCode();
		
		switch (pressed)
		{
		case KeyEvent.VK_DOWN:
			player.direction = 0;
			player.moved(16);
			break;
		case KeyEvent.VK_UP:
			player.direction = 1;
			player.moved(16);
			break;
		case KeyEvent.VK_LEFT:
			player.direction = 2;
			player.moved(16);
			break;
		case KeyEvent.VK_RIGHT:
			player.direction = 3;
			player.moved(16);
			break;
		}
		
		
	}

	@Override
	public void keyReleased(KeyEvent ke) {
		// TODO Auto-generated method stub
		int pressed = ke.getKeyChar();
		
		switch (pressed)
		{
		case KeyEvent.VK_DOWN:
			player.direction = 0;
			break;
		case KeyEvent.VK_UP:
			player.direction = 1;
			break;
		case KeyEvent.VK_LEFT:
			player.direction = 2;
			break;
		case KeyEvent.VK_RIGHT:
			player.direction = 3;
			break;
		}
		
	}

	@Override
	public void keyTyped(KeyEvent ke) {
		// TODO Auto-generated method stub
		int pressed = ke.getKeyChar();
		
		switch (pressed)
		{
		case KeyEvent.VK_DOWN:
			player.direction = 0;
			break;
		case KeyEvent.VK_UP:
			player.direction = 1;
			break;
		case KeyEvent.VK_LEFT:
			player.direction = 2;
			break;
		case KeyEvent.VK_RIGHT:
			player.direction = 3;
			break;
		}
		
	}
	
	
    private JLayeredPane layeredPane;
    private JLabel dukeLabel;
    private JCheckBox onTop;
    private JComboBox layerList;
    private String[] layerStrings = { "Yellow (0)", "Magenta (1)",
            "Cyan (2)",   "Red (3)",
            "Green (4)" };
    private Color[] layerColors = { Color.yellow, Color.magenta,
          Color.cyan,   Color.red,
          Color.green };


    //Adjustments to put Duke's toe at the cursor's tip.
    private static final int XFUDGE = 40;
    private static final int YFUDGE = 57;
    private void init(JPanel mapfield, ImageIcon floorIcon)
    {
        setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));

        //Create and load the duke icon.
        final ImageIcon icon = createImageIcon("images/dukeWaveRed.gif");

        //Create and set up the layered pane.
        layeredPane = new JLayeredPane();
        layeredPane.setPreferredSize(new Dimension(300, 310));
        //layeredPane.setBorder(BorderFactory.createTitledBorder(
          //                          "Move the Mouse to Move Duke"));
        //layeredPane.addMouseMotionListener(this);
		rows = layeredPane.getPreferredSize().width / 16;
		columns = layeredPane.getPreferredSize().height / 16;

        //This is the origin of the first label added.
        Point origin = new Point(10, 20);

        //This is the offset for computing the origin for the next label.
        int offset = 35;

        //Add several overlapping, colored labels to the layered pane
        //using absolute positioning/sizing.
/*        for (int i = 0; i < layerStrings.length; i++) {
            JLabel label = createColoredLabel(layerStrings[i],
                                              layerColors[i], origin);
            layeredPane.add(label, new Integer(i));
            origin.x += offset;
            origin.y += offset;
        }*/

        //Create and add the player to the layered pane.
        player = new PlayerCharacter(new Dimension((rows -1) * 16, (columns -1) * 16));
        player.setBounds(0, 0, 16, 16);
        
		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < columns; j++)
			{
				JLabel floorTile = new JLabel();
				floorTile.setIcon(floorIcon);
				floorTile.setBounds(i, j, floorIcon.getIconWidth(), floorIcon.getIconHeight());
				layeredPane.add(floorTile, new Integer(1), i * columns + j);
				floorTile.setLocation(i * 16, j * 16);
			}
			
		}
		
		generateBlockers(layeredPane, new Integer(2));
        player.pillars = pillars;
		
		if (pillars.contains(new Point(0,0)))
		{
			boolean set=false;
			for (int i = 0; i < rows; i++)
			{
				for (int j = 0; j < columns; j++)
				{
					if (!pillars.contains(new Point(i, j)))
					{
						player.setLocation(i*16, j*16);
						player.setPosition(new Point(i*16, j*16));
						player.setGridPosition(new Point(i, j));
						set = true;
						break;
					}
				}
				if (set)
					break;
			}
		}
        layeredPane.add(player, new Integer(2), 0);

        //Add control pane and layered pane to this JPanel.
        mapField.add(Box.createRigidArea(new Dimension(0, 10)));
        mapField.add(createControlPanel());
        mapField.add(Box.createRigidArea(new Dimension(0, 10)));
        mapField.add(layeredPane);
    }
    //Create and set up a colored label.
    private JLabel createColoredLabel(String text,
                                      Color color,
                                      Point origin) {
        JLabel label = new JLabel(text);
        label.setVerticalAlignment(JLabel.TOP);
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setOpaque(true);
        label.setBackground(color);
        label.setForeground(Color.black);
        label.setBorder(BorderFactory.createLineBorder(Color.black));
        label.setBounds(origin.x, origin.y, 140, 140);
        return label;
    }
    private static String ON_TOP_COMMAND = "ontop";
    private static String LAYER_COMMAND = "layer";

    //Create the control pane for the top of the frame.
    private JPanel createControlPanel() {

        JPanel controls = new JPanel();
        JButton  reset = new JButton();
        //controls.add(reset);
        controls.setBorder(BorderFactory.createTitledBorder(
                                 "Controls"));
        return controls;
    }

    //Make Duke follow the cursor.
    public void mouseMoved(MouseEvent e) {
        player.setLocation(e.getX()-XFUDGE, e.getY()-YFUDGE);
    }
    public void mouseDragged(MouseEvent e) {} //do nothing

    //Handle user interaction with the check box and combo box.
    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();

        if (ON_TOP_COMMAND.equals(cmd)) {
            if (onTop.isSelected())
                layeredPane.moveToFront(dukeLabel);
            else
                layeredPane.moveToBack(dukeLabel);

        } else if (LAYER_COMMAND.equals(cmd)) {
            int position = onTop.isSelected() ? 0 : 1;
            layeredPane.setLayer(dukeLabel,
                                 layerList.getSelectedIndex(),
                                 position);
        }
    }

    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    public static void createAndShowGUI() {
        //Create and set up the window.
        JFrame frame = new JFrame("LayeredPaneDemo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Create and set up the content pane.

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
}
